/*
 Copyright (C) 2019 Quaternion Risk Management Ltd
 All rights reserved.

 This file is part of ORE, a free-software/open-source library
 for transparent pricing and risk analysis - http://opensourcerisk.org

 ORE is free software: you can redistribute it and/or modify it
 under the terms of the Modified BSD License.  You should have received a
 copy of the license along with this program.
 The license is also available online at <http://opensourcerisk.org>

 This program is distributed on the basis that it will form a useful
 contribution to risk analytics and model standardisation, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE. See the license for more details.
*/

/*! \file ored/scripting/paylog.hpp
    \brief repository for cashflows generated by the PAYLOG() function
    \ingroup scripting
*/

#pragma once

#include <qle/math/randomvariable.hpp>

#include <ql/time/date.hpp>

namespace ore {
namespace data {

using namespace QuantLib;
using namespace QuantExt;

class PayLog {
public:
    // write to log, if slot > 0 overwrite existing entry with same slot, otherwise add to existing results
    void write(RandomVariable value, const Filter& filter, const Date& obs, const Date& pay, const std::string& ccy,
               const Size legNo, const std::string& cashflowType, const Size slot = 0);

    // group amounts and sort in ascending order using the key (legNo, pay date, pay ccy, cfType)
    void consolidateAndSort();

    // read from log, the vectors are guaranteed to have all the same length size()
    Size size() const { return slots_.size(); }
    const std::vector<RandomVariable>& amounts() const { return amounts_; }
    const std::vector<Date>& dates() const { return dates_; }
    const std::vector<std::string>& currencies() const { return currencies_; }
    const std::vector<Size>& legNos() const { return legNos_; }
    const std::vector<std::string>& cashflowTypes() const { return cashflowTypes_; }

private:
    std::vector<Size> slots_;
    std::vector<RandomVariable> amounts_;
    std::vector<Date> dates_;
    std::vector<std::string> currencies_;
    std::vector<Size> legNos_;
    std::vector<std::string> cashflowTypes_;
};

} // namespace data
} // namespace ore
